name: Dispatch build bottle (for chosen OS versions)


on:
  workflow_dispatch:
    inputs:
      runner:
        description: Build runner(s) (macOS version or Linux)
        required: true
      formula:
        description: Formula name
        required: true
      timeout:
        description: "Build timeout (in minutes, default: 60 minutes)"
        default: "60"
        required: true
      issue:
        description: Issue number, where comment on failure would be posted
        required: false
      upload:
        description: "Whether to upload built bottles or not (default: false)"
        required: false

env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_CHANGE_ARCH_TO_ARM: 1

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      runners: ${{steps.runner-matrix.outputs.result}}
    steps:
      - name: Prepare runner matrix
        id: runner-matrix
        uses: actions/github-script@v6
        with:
          script: |
            return context.payload.inputs.runner.split(",")
                                                .map(s => s.trim())
                                                .filter(Boolean);
  bottle:
    needs: prepare
    strategy:
      matrix:
        runner: ${{fromJson(needs.prepare.outputs.runners)}}
    runs-on: ${{matrix.runner}}
    timeout-minutes: ${{fromJson(github.event.inputs.timeout)}}
    defaults:
      run:
        shell: /bin/bash -e {0}
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: ${{github.event.inputs.formula}}
        id: print_details
        run: |
          echo sender=${{github.event.sender.login}}
          echo formula=${{github.event.inputs.formula}}
          echo runner=${{github.event.inputs.runner}}
          echo timeout=${{github.event.inputs.timeout}}
          echo issue=${{github.event.inputs.issue}}
          echo upload=${{github.event.inputs.upload}}

      - name: Set environment variables
        if: runner.os == 'macOS'
        run: |
          echo 'PATH=/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' >> $GITHUB_ENV
          # TODO: remove the line below once set in the runner .env file
          echo 'GITHUB_ACTIONS_HOMEBREW_SELF_HOSTED=1' >> $GITHUB_ENV

      - name: Run Docker container
        if: runner.os == 'Linux'
        env:
          TAP_PATH: /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core
        run: |
          docker run \
            --detach \
            --user linuxbrew \
            --name ${{github.sha}} \
            --env-file <(env | egrep 'HOMEBREW|GITHUB') \
            --workdir /tmp/bottles \
            --pull always \
            ghcr.io/homebrew/ubuntu16.04:master \
            sleep inf
          # Fix working directory permissions
          docker exec --user root ${{github.sha}} chmod 777 /tmp/bottles

          docker exec --workdir "$TAP_PATH" ${{github.sha}} git remote set-url origin ${{github.event.repository.html_url}}
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git fetch origin ${{github.sha}} '+refs/heads/*:refs/remotes/origin/*'
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git remote set-head origin --auto
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git checkout --force -B master FETCH_HEAD

      - name: Set up Homebrew
        id: set-up-homebrew
        if: runner.os == 'macOS'
        uses: Homebrew/actions/setup-homebrew@master

      - if: runner.os == 'macOS'
        run: |
          git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" remote set-url origin https://github.com/Homebrew/homebrew-core
          brew test-bot --only-cleanup-before

      - name: Run brew test-bot --only-setup
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" remote set-url origin https://github.com/Homebrew/homebrew-core
            brew test-bot --only-setup
          else
            git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" remote set-url origin https://github.com/Homebrew/homebrew-core
            docker exec ${{github.sha}} brew test-bot --only-setup
          fi

      - name: Run brew test-bot --only-formulae --only-json-tab --skip-online-checks --skip-dependents ${{github.event.inputs.formula}}
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" remote set-url origin https://github.com/Homebrew/homebrew-core
            mkdir bottles
            cd bottles
            brew test-bot --only-formulae --only-json-tab --skip-online-checks --skip-dependents ${{github.event.inputs.formula}}
          else
            git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" remote set-url origin https://github.com/Homebrew/homebrew-core
            docker exec ${{github.sha}} brew test-bot --only-formulae --only-json-tab --skip-online-checks --skip-dependents ${{github.event.inputs.formula}}
          fi

      - name: Copy bottles from container
        if: always() && runner.os == 'Linux'
        run: docker cp ${{github.sha}}:/tmp/bottles .

      - name: Failures summary and output brew bottle result
        if: always()
        uses: mohzulfikar/actions@v3
        
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@main
        with:
          name: logs
          path: bottles/logs

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf bottles/logs
          rm -rvf bottles/home

      - name: Count bottles
        id: bottles
        if: always()
        run: |
          cd bottles
          count=$(ls *.json | wc -l | xargs echo -n)
          echo "$count bottles"
          echo "::set-output name=count::$count"
          failures=$(ls failed/*.json | wc -l | xargs echo -n)
          echo "$failures failed bottles"
          echo "::set-output name=failures::$failures"

      - name: Upload failed bottles
        if: always() && steps.bottles.outputs.failures > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles-${{ matrix.runner }}
          path: bottles/failed

      # Must be run before the `Upload bottles` step so that failed
      # bottles are not included in the `bottles` artifact.
      - name: Delete failed bottles
        if: always()
        run: rm -rvf bottles/failed

      - name: Upload bottles to GitHub Actions
        if: always() && steps.bottles.outputs.count > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: bottles

      - name: Post cleanup
        if: always()
        run: |
          if [ "$RUNNER_OS" = 'Linux' ]; then
            docker rm -f ${{github.sha}}
          else
            brew test-bot --only-cleanup-after
          fi
          rm -rvf bottles

